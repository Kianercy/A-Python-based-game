\

# Do you want to leanr through game?, here you create a puzzle to fill out blanks.


parts_unknown = ['___1___','___2___','___3___','___4___']

def try_it_again(i,Lev,answer):       
    ''' This function get the user ansewer "i" a nd level of the game. Then it determine if the anwersi corect or not.
    For a wrong answer the fucntion ask user to try a better anwser.'''
    if Lev=='Level 1':
        ans_key = {'___1___':'GitHub','___2___':'repository','___3___':'hosting','___4___': 'service'}
    if Lev=='Level 2':
        ans_key = {'___1___':'Git','___2___':'speed','___3___':'non-linear','___4___': '2005'}
    if Lev=='Level 3':
        ans_key ={'___1___':'function','___2___':'variables','___3___':'None','___4___': 'list'}
    if answer==ans_key[i]:
        return answer
    while answer!=ans_key[i]:
        answer = raw_input("You can choose a better answer: ")  
    return answer

                
                
def word_substitute(sample,parts_unknown):
    ''' This function get the word from sentence(sample) and a word from the unknow part patterns, then if a senetnce's word and 
    the word match it will return it. '''
    for  i in parts_unknown:
        if i==sample:
            return i
    return None
def replacment(old_word,new_word,list_sample):
    ''' This function makeup the new sentence by adding the correct answer to the sentence.'''
    new_list =[]
    for i in list_sample:
        if old_word != i:
            new_list.append(i)
        else:
            new_list.append(new_word)
    return new_list                
                        
                        
        

def choose_level():
    ''' This function contains the quizses for different level of the game. It promote  to ask the user which level 
    he/she palys and provides the appropraite quiz sample.'''

    sample1=''' ___1___  is a web-based Git ___2___ ___3___ ___4___ . '''
        
    sample2 = ''' ___1___ is a widely-used source code management system for software
    development. It is a distributed revision control system with an emphasis on ___2___', data integrity,
    and support for distributed, ___3___  workflows. ___1___  was initially designed and
    developed in ___4___ by Linux kernel  for Linux kernel development.'''
        
    sample3 = '''A ___1___ is created with the def keyword. You specify the inputs a ___1___ takes by
    adding ___2___ separated by commas between the parentheses. ___1___ s by default return ___3___ if you
    don't specify the value to return. ___2___ can be standard data types such as string, number, dictionary,
    tuple, and ___4___ or can be more complicated such as objects and lambda functions.'''
    user_choice = raw_input("Please choose your game level-> Level 1, Level 2,  Level 3  : ")

    if (user_choice!='Level 1') and (user_choice!='Level 2') and (user_choice!='Level 3'):
        user_choice = raw_input(" Please choose your level by 'exaclty' type: Level 1, Level 2, or Level 3  ")                

    if (user_choice=='Level 1'):
        return sample1,'Level 1'
        
    if (user_choice=='Level 2'):
        return sample2,'Level 2'
        
    if (user_choice=='Level 3'):
        return sample3,'Level 3'

def get_the_answer_add_sentence(r,Lev,test1):
    user_input = raw_input("What is your best guess for "+ r+" ?")
    user_input = try_it_again(r,Lev,user_input)
    #replaced.append(user_input)
    test1 = replacment(r,user_input,test1)
    return test1,user_input


def play_game(parts_unknown):
    ''' This function is the main fucntion of this code and it  integrate  all the previouse fucntions.  It get the unknow part patterns and 
    satrt the game. The fucntion gadualy build up the right sentence by adding words to the "replaced" list 
    and finally retrun the complete sentence. '''
    replaced = []
    previous_unknown = {}
    test,Lev=choose_level()
    print (test)
    test1 = test.split()
    for word in test1:
        r1 = word_substitute(word,parts_unknown)
        r2 = word_substitute(word,previous_unknown)
        if (r1!=None) and (r2==None):
            test1,user_input = get_the_answer_add_sentence(r1,Lev,test1)
            previous_unknown[r1] = user_input
            print (" ".join(test1))
        elif (r1!=None) and (r2!=None):
            replaced.append(previous_unknown[r1])                                                                
        else:
            replaced.append(word)
                        
    replaced =" ".join(replaced)
    return replaced         
                    

play_game(parts_unknown)

















